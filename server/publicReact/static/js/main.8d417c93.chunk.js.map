{"version":3,"sources":["components/calculator/Calculator.js","App.js","serviceWorker.js","index.js"],"names":["Calculator","props","state","screen","currentOp","leftSide","rightSide","isDecimal","numbers","value","id","operations","addToScreen","bind","buildCalculator","handleChange","setOperator","renderSubtotal","x","y","operator","isNegative","this","setState","subtotal","getSubtotal","char","checkZeroScreen","event","target","pads","map","row","rowIndex","number","index","numberClass","onClick","key","className","operationPads","operation","type","onChange","reset","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8d417c93.chunk.js","sourcesContent":["import React from 'react';\nimport './Calculator.scss'\nclass Calculator extends React.Component {\n    constructor (props) {\n        super(props)\n        this.state = {\n            screen: '',\n            currentOp: '',\n            leftSide: '',\n            rightSide: '',\n            isDecimal: false,\n            numbers: [\n                [\n                    { value: 1, id: 'one' },\n                    { value: 2, id: 'two' },\n                    { value: 3, id: 'three' }\n                ],\n                [\n                    { value: 4, id: 'four' },\n                    { value: 5, id: 'five' },\n                    { value: 6, id: 'six' }\n                ],\n                [\n                    { value: 7, id: 'seven' },\n                    { value: 8, id: 'eight' },\n                    { value: 9, id: 'nine' }\n                ],\n                [\n                    { value: 0, id: 'zero' },\n                    { value: '.', id: 'decimal' }\n                ]\n            ],\n            operations: [\n                { value: '+', id: 'add' },\n                { value: '-', id: 'subtract' },\n                { value: '*', id: 'multiply' },\n                { value: '/', id: 'divide' }\n            ],\n        }\n        this.addToScreen = this.addToScreen.bind(this)\n        this.buildCalculator = this.buildCalculator.bind(this)\n        this.handleChange = this.handleChange.bind(this)\n        this.setOperator = this.setOperator.bind(this)\n        this.renderSubtotal = this.renderSubtotal.bind(this)\n    }\n\n    getSubtotal(x, y, operator, isNegative) {\n        x = +x;\n        y = isNegative ? -y : +y\n        if (operator === '+') {\n            return x + y;            \n        } else if (operator === '-') {\n            return x - y;            \n        } else if (operator === '*') {\n            return x * y;\n        } else if (operator === '/' && y !== 0) {\n            return x / y;\n        } else {\n            return 'Error on Ops'\n        }\n    }\n\n    renderSubtotal (isNegative = false) {\n        this.setState(state => {\n            const subtotal = this.getSubtotal(this.state.leftSide, this.state.screen, this.state.currentOp, isNegative)\n            return {\n                screen: subtotal,\n                subtotal,\n                leftSide: ''\n            }\n        })\n    }\n\n    checkZeroScreen(screen, char) {\n        return screen === 0 ? 0 + char :`${screen}${char}`\n    }\n\n    addToScreen (char) {\n        if (!this.state.currentOp) {\n            if (char === '.') {\n                if (this.state.isDecimal) {\n                    return;\n                }\n                this.setState({\n                    isDecimal: true\n                })\n            }\n\n            this.setState(state => ({\n                screen: this.checkZeroScreen(state.screen, char)\n            }))\n        } else {\n            if (!this.state.rightSide) {\n                this.setState(state => ({\n                    leftSide: state.screen,\n                    screen: ''\n                }))\n            }\n            this.setState(state => {\n                const rightSide = this.checkZeroScreen(state.screen, char)\n                return {\n                    rightSide,\n                    screen: rightSide\n                }\n            })\n        }\n    }\n    setOperator (operator) {\n        if (this.state.currentOp) {\n            const isNegative = operator === '-'\n            this.renderSubtotal(isNegative)\n        }\n        this.setState(state => ({\n            rightSide: '',\n            currentOp: operator,\n            leftSide: state.screen,\n        }))\n    }\n\n    handleChange (event) {\n        this.setState({\n            screen: event.target.value\n        })\n    }\n    reset() {\n        this.setState({\n            screen: 0,\n            currentOp: '',\n            leftSide: '',\n            rightSide: '',\n            subtotal: '',\n            isDecimal: false\n        })\n    }\n    buildCalculator () {\n         this.pads = this.state.numbers.map((row, rowIndex) => {\n            return row.map((number, index) => {\n                let numberClass = '';\n                if (number.value === 0) {\n                    numberClass = 'Calculator__zero'\n                } else if (number.value === ',') {\n                    numberClass = 'Calculator__comma'\n                }\n                \n                return (\n                    <button\n                        onClick={() => this.addToScreen(number.value)}\n                        key={`numbers_${rowIndex}_${index}`} \n                        className={`Calculator__button ${numberClass}`}\n                        id={number.id}\n                    >\n                        {number.value}\n                    </button>\n                )\n            })\n        })\n        this.operationPads = this.state.operations.map((operation, index) => {\n                let numberClass = '';\n                if (operation.value === '-') {\n                    numberClass = 'Calculator__minus'\n                } else if (operation.value === '*' || operation.value === '/') {\n                    numberClass = 'Calculator__operators--border-right'\n                }\n                \n                return (\n                    <button\n                        onClick={() => this.setOperator(operation.value)}\n                        key={`operations__${index}`} \n                        className={`Calculator__button ${numberClass}`}\n                        id={operation.id}\n                    >\n                        {operation.value}\n                    </button>\n                )\n        })\n    }\n    render () {\n        this.buildCalculator();\n        \n        return (\n            <div className=\"Calculator\">\n                <input\n                    id=\"display\"\n                    type=\"text\"\n                    className=\"Calculator__input\"\n                    value={this.state.screen}\n                    onChange={this.handleChange}\n                />\n                <div className=\"Calculator__display\">\n                    <div className=\"Calculator__numbers\">\n                        { this.pads }\n                    </div>\n                    <div className=\"Calculator__operators\">\n                        { this.operationPads }\n                        \n                        <button\n                            id=\"equals\"\n                            onClick={ () => this.renderSubtotal(false) } \n                            className=\"Calculator__button Calculator__equal\"\n                        >\n                            =\n                        </button>\n                        <button\n                            onClick={() => this.reset()} \n                            className=\"Calculator__button Calculator__AC\"\n                            id=\"clear\"\n                        >\n                            AC\n                        </button>\n                    </div>\n\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Calculator;\n","import React from 'react';\nimport './App.scss';\nimport Calculator from './components/calculator/Calculator'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <div className=\"App__project--container\">\n            <Calculator></Calculator>\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}